#!/bin/bash -eu
# Create an encrypted backup (in 5 GB pieces) inside our scratch space.
#
# This can be put on a hard drive and stored under the SM's mattress, uploaded
# to Google Nearline, automatically uploaded to Box.com, etc.
set -o pipefail

ARCHIVE_DIRECTORY="/opt/backups/scratch/archive"
TARGET_VOLUME="/dev/vg-backups/backups-live"
SNAPSHOT_PATH="/dev/vg-backups/backups-snapshot"

# import staff keys into temporary gpg dir
gpgdir=$(mktemp -d)
gpg --homedir "$gpgdir" --no-tty --quiet --import /opt/share/backups/keys/*.asc

# make a LVM snapshot
if [ -e "$SNAPSHOT_PATH" ]; then
    echo "Snapshot already exists: ${SNAPSHOT_PATH}" >&2
    exit 1
fi

# try really hard to remove logical volume on exit
cleanup() {
    if [ -e "$SNAPSHOT_PATH" ]; then
        echo "Removing logical volume: $SNAPSHOT_PATH"
        lvremove -f "$SNAPSHOT_PATH"
    fi
}
trap cleanup EXIT

# we don't have *quite* enough space to make a snapshot with the full 2TB of
# disk space, so we make a large enough snapshot that we'll *probably* avoid
# trouble
lvcreate -L 500G --snapshot --name "$SNAPSHOT_PATH" "$TARGET_VOLUME"

umask 077
rm -rf "$ARCHIVE_DIRECTORY"
mkdir "$ARCHIVE_DIRECTORY"

compress_and_encrypt() {
    dd if="$SNAPSHOT_PATH" bs=32M | pigz |
        gpg --homedir "$gpgdir" \
            --no-tty \
            --quiet \
            --encrypt \
            --trust-model always \
            --compress-algo none \
            --recipient ckuehl@berkeley.edu \
            --recipient willh@ocf.berkeley.edu \
            --recipient jvperrin@ocf.berkeley.edu \
            --recipient mattmcal@ocf.berkeley.edu \
            --recipient kpengboy@ocf.berkeley.edu \
            --recipient abizer@ocf.berkeley.edu \
            --recipient benzhang4@gmail.com \
            --recipient daniel@dkess.me
}

split_parts() {
    split -d -a 4 -b 5G - \
        "${ARCHIVE_DIRECTORY}/backup-$(date +%Y-%m-%d).img.gz.gpg.part"
}

# Only show pv output if the terminal is interactive (no cron email pv spam)
if [ -t 0 ]; then
    compress_and_encrypt | pv | split_parts
else
    compress_and_encrypt | split_parts
fi
