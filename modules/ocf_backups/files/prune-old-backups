#!/usr/bin/env python3

import argparse
import datetime
import json
import shlex
import subprocess
import textwrap

RETENTION_TIME = datetime.timedelta(days=180) # 6 months

BACKUP_PREFIX = 'ocf-backup-'
BOX_FTP = 'ftps://ftp.box.com:990'
CREDS_PATH = '/opt/share/backups/box-creds.json'

LFTP_INIT = '''
    set ftps:initial-prot ""
    set ftp:ssl-force true
    set ftp:ssl-protect-data true
    open {box_ftp}
    user {email} {passwd}
    {command}
'''

def parse_date(dtstr):
    """Converts a 'YYYY-MM-DD' formatted string to a datetime.date object."""
    return datetime.datetime.strptime(dtstr, "%Y-%m-%d").date()

def lftp_cmd(creds, command, out=subprocess.PIPE):
    """Runs an lftp command and returns the output as a binary string."""
    cmd = LFTP_INIT.format(
        box_ftp=BOX_FTP,
        email=creds['email'],
        passwd=creds['password'],
        command=command,
    )

    p = subprocess.run(['lftp', '--norc'], input=cmd.encode(), stdout=out)
    p.check_returncode()
    return p.stdout

def list_items(creds):
    """List all items at the root of the Box.com folder."""
    return lftp_cmd(creds, 'renlist').decode().splitlines()

def delete_items(creds, items, quiet):
    if quiet:
        stdout_pipe = subprocess.DEVNULL
    else:
        stdout_pipe = None

    lftp_cmd(
        creds,
        'rm -r ' + ' '.join(shlex.quote(item) for item in items),
        out=stdout_pipe,
    )

def is_old_backup(filename):
    """Returns true if this backup is old enough to be deleted."""
    start, _, end = filename.partition(BACKUP_PREFIX)

    # Not a backup
    if start:
        return False

    try:
        backup_date = parse_date(end)
    except ValueError:
        return False

    return datetime.date.today() - backup_date > RETENTION_TIME

def main():
    parser = argparse.ArgumentParser(description='Prune old Box.com backups')
    parser.add_argument(
        '-n', '--dry-run',
        action='store_true',
        help='Show which backups would be deleted, but do not delete.'
    )
    parser.add_argument(
        '-q', '--quiet',
        action='store_true',
        help='Do not output progress or information to stdout.',
    )

    args = parser.parse_args()

    with open(CREDS_PATH) as f:
        creds = json.load(f)

    items = set(list_items(creds))

    to_delete = {item for item in items if is_old_backup(item)}

    if not args.quiet:
        print('Items to delete:')
        print(textwrap.indent('\n'.join(sorted(to_delete)), '  '))
        print()

        print('Items to keep:')
        print(textwrap.indent('\n'.join(sorted(items - to_delete)), '  '))


    if not args.dry_run:
        delete_items(creds, to_delete, args.quiet)

if __name__ == '__main__':
    main()
