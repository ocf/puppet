#!/usr/bin/env python3
"""Write Prometheus metrics to a textfile for a mirror.

This detects most problems caused by both failed syncs to our direct upstream
as well as cases where the upstream is out-of-date.

Ideally, the upstream url argument should refer to the *actual* upstream (e.g. Debian's
authoritative archive) and not just our upstream mirror (e.g.
mirrors.kernel.org).
"""
import argparse
import sys
from collections import namedtuple
from datetime import datetime

import dateutil.parser
import requests
from prometheus_client import CollectorRegistry
from prometheus_client import Gauge
from prometheus_client import write_to_textfile

Mirror = namedtuple('Mirror', ['url', 'updated_at'])


def update_func(healthcheck):
    if healthcheck == 'debian':
        return get_updated_debian
    elif healthcheck == 'manjaro':
        return get_updated_manjaro
    elif healthcheck == 'unix_timestamp':
        return get_updated_unix_timestamp
    elif healthcheck == 'datetime':
        return get_updated_datetime
    elif healthcheck == 'recursive_ls':
        return get_updated_recursive_ls
    else:
        raise ValueError('Unsupported type: {}'.format(healthcheck))


def get_updated_datetime(mirror_url):
    """Find the time the host was last synced.
    The first line on the page should be a datetime, e.g. Fri Jan 19 20:15:01 UTC 2018.
    >>> get_updated_datetime(mirror_url)
    datetime.datetime(2018, 1, 19, 20, 15, 1, tzinfo=tzutc())
    """
    req = requests.get(mirror_url)
    req.raise_for_status()
    return dateutil.parser.parse(req.text.splitlines()[0])


def get_updated_unix_timestamp(mirror_url):
    """Find the time the host was last synced.
    The first line on the page should be a unix timestamp, e.g. 1516392227.
    >>> get_updated_unix_timestamp(mirror_url)
    datetime.datetime(2018, 1, 19, 20, 3, 47)
    """
    req = requests.get(mirror_url)
    req.raise_for_status()
    return datetime.utcfromtimestamp(int(req.text.split()[0]))


def get_updated_recursive_ls(mirror_url):
    """Find the time the host was last synced.
    Should contain the output of ls -lR
    >>> get_updated_recursive_ls(mirror_url)
    datetime.datetime(2018, 1, 24, 10, 3)
    """
    req = requests.get(mirror_url)
    req.raise_for_status()
    # Ex: drwxr-xr-x  3 ftpadmin packager   3 2009-09-21 14:51 3.5.6
    # Splits on date and time, giving us "2009-09-21 14:51"
    dates = [' '.join(line.split()[5:7]) for line in req.text.splitlines()
             if len(line.split()) == 8]
    return dateutil.parser.parse(max(dates))


def get_updated_debian(mirror_url):
    """Find the time the host was last synced.
    The page of should have a line of the form "Date: Fri, 19 Jan 2018 19:26:41 UTC"
    >>> get_updated_debian(mirror_url)
    datetime.datetime(2018, 1, 19, 19, 26, 41, tzinfo=tzutc())
    """
    req = requests.get(mirror_url)
    req.raise_for_status()
    updated_line, = [line for line in req.text.splitlines() if line.startswith('Date: ')]
    return dateutil.parser.parse(updated_line.split(': ', 1)[1])


def get_updated_manjaro(mirror_url):
    """Find the time the host was last synced.
    Line in question should be of the form "date=2018-01-25T21:52:18Z"
    >>> get_updated_manjaro(mirror_url)
    datetime.datetime(2018, 1, 25, 21, 52, 18, tzinfo=tzutc())
    """
    req = requests.get(mirror_url)
    req.raise_for_status()
    updated_line, = [line for line in req.text.splitlines() if line.startswith('date=')]
    return dateutil.parser.parse(updated_line.split('=', 1)[1])


def write_prometheus(project, local, upstream):
    registry = CollectorRegistry()
    updated_upstream = Gauge(
        'mirror_updated_upstream',
        'When the upstream mirror was last updated',
        ['project'],
        registry=registry,
    )
    updated_upstream.labels(project=project).set(upstream.timestamp())

    updated_local = Gauge(
        'mirror_updated_local',
        'When the local mirror was last updated',
        ['project'],
        registry=registry,
    )
    updated_local.labels(project=project).set(local.timestamp())

    write_to_textfile(
        '/opt/mirrors/prometheus/{}.prom'.format(project),
        registry,
    )


if __name__ == '__main__':
    parser = argparse.ArgumentParser()

    parser.add_argument('project', type=str, help='Project title')
    parser.add_argument('url_local', type=str, help='URL of local mirror')
    parser.add_argument('url_upstream', type=str, help='URL of upstream mirror')
    parser.add_argument('-t', '--type', type=str, default='debian')

    # ensure we aren't comparing a mirror against itself
    args = parser.parse_args()

    if args.url_local == args.url_upstream:
        print('Local and upstream urls cannot be equal... Exiting!')
        sys.exit(1)

    get_updated = update_func(args.type)

    local_mirror = Mirror(args.url_local, get_updated(args.url_local))
    upstream_mirror = Mirror(args.url_upstream, get_updated(args.url_upstream))

    write_prometheus(
        args.project,
        local_mirror.updated_at,
        upstream_mirror.updated_at,
    )

# vim: ft=python
