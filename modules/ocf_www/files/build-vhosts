#!/usr/bin/env python3
import argparse
import grp
import os.path
import re
import shutil
import subprocess
import sys
import tempfile
from collections import namedtuple
from itertools import chain
from pathlib import Path
from socket import getfqdn

import jinja2
from ocflib.account.search import user_is_sorried
from ocflib.account.utils import web_dir
from ocflib.misc.mail import email_for_user
from ocflib.vhost.application import get_app_vhosts
from ocflib.vhost.web import get_vhosts


APACHE_SITE_CONFIG = '/etc/apache2/ocf-vhost.conf'
NGINX_SITE_CONFIG = '/etc/nginx/sites-enabled/virtual'

LETS_ENCRYPT_SSL = Path('/services/http/ssl')
SYSTEM_SSL = Path('/etc/ssl/private')

APP_DIR = Path('/srv/apps')


jinja_env = jinja2.Environment(
    loader=jinja2.FileSystemLoader((
        os.path.abspath(os.path.dirname(__file__)),
        '/opt/share',
    )),
)


class SSL(namedtuple('SSL', ('fqdn',))):
    """Tells where to find SSL files for a given domain."""
    key = '/etc/ssl/lets-encrypt/le-vhost.key'

    @property
    def is_valid(self):
        return os.path.exists(self.bundle)

    @property
    def bundle(self):
        return str(LETS_ENCRYPT_SSL / (self.fqdn + '.crt'))


class SystemSSL(namedtuple('SystemSSL', ('fqdn',))):
    """Tells where to find the standard OCF SSL files for this host (wildcards,
    fqdn.o.b.e, etc.).
    """

    @property
    def bundle(self):
        return str(SYSTEM_SSL / (self.fqdn + '.bundle'))

    @property
    def key(self):
        return str(SYSTEM_SSL / (self.fqdn + '.key'))


class VirtualHost(namedtuple('VirtualHost', (
        'fqdn',
        'user',
        'comment',
        'ssl',
        'bind_type',
        'bind_dest',
        'additional_rules',
))):
    """A logical representation of a virtual host directive in one of
    the webserver configs.

    A VirtualHost corresponds to a unique combination of a port to
    listen on and an FQDN naming it. This means that some vhost lines
    might emit multiple VirtualHost instances (redirect domains, etc.).

    VirtualHost instances contain no data specific to a specific host.
    However, the methods defined here, used by the config templates, do
    use information specific to the webhost and apphost setups.

    bind_type can be any of 'socket', 'docroot', or 'redirect'.
    bind_dest is then respectively the user socket name, the website
    root directory relative to public_html, or URL to redirect to.

    additional_rules should be a dictionary of
    additional rules that you'll have to add logic to handle in this
    class. Currently the only supported one is 'ws', which is meant
    to add an additional WebSockets path for socket-based app vhosts.
    """
    @property
    def contact_email(self):
        return email_for_user(self.user)

    @property
    def is_redirect(self):
        return self.bind_type == 'redirect'

    @property
    def is_apphost(self):
        return self.bind_type == 'socket'

    @property
    def docroot(self):
        assert self.bind_type == 'docroot'
        return os.path.join(
            web_dir(self.user),
            self.bind_dest.strip('/'),
        )

    @property
    def port(self):
        return 443 if self.ssl else 80

    @property
    def canonical_url(self):
        return '{proto}://{fqdn}'.format(
            proto='https' if self.ssl else 'http',
            fqdn=self.fqdn,
        )

    @property
    def disabled(self):
        return user_is_sorried(self.user)

    @property
    def socket(self):
        assert self.bind_type == 'socket'
        return str(APP_DIR / self.user / (self.bind_dest + '.sock'))

    @property
    def redirect_dest(self):
        assert self.is_redirect
        return self.bind_dest

    @property
    def redirect_type(self):
        if '301' in self.additional_rules:
            return 301
        return 302

    @property
    def response_headers(self):
        result = {}
        if 'noindex' in self.additional_rules:
            result['X-Robots-Tag'] = 'noindex'
        return result

    @property
    def websocket_locations(self):
        if self.bind_type == 'socket' and 'ws' in self.additional_rules:
            return self.additional_rules['ws']
        else:
            return []

    def dev_alias(self, dev_config=False):
        return '{}.{}.ocf.berkeley.edu'.format(
            self.fqdn.replace('.', '-'),
            'dev-apphost' if dev_config else 'apphost',
        )


def report(*args, **kwargs):
    print(*args, **kwargs)
    kwargs.setdefault('file', sys.stdout)
    kwargs['file'].flush()


def build_config(src_vhosts, template, dev_config=False):
    vhosts = list()

    for domain, vhost in src_vhosts.items():
        user = vhost['username']
        ssl = SSL(domain)

        # Exactly one must be true
        assert ('socket' in vhost) != ('docroot' in vhost)
        if 'socket' in vhost:
            bind_type = 'socket'
        else:
            bind_type = 'docroot'
        bind_dest = vhost[bind_type]

        # Match and process supported flags
        additional_rules = {}
        for flag in vhost['flags']:
            ws_match = re.match(r'ws\=(.+)', flag)
            if ws_match:
                additional_rules.setdefault('ws', []).append(ws_match.group(1))
            else:
                additional_rules[flag] = True

        # primary vhost
        primary = VirtualHost(
            fqdn=domain,
            user=user,
            comment='{} (user {})'.format(domain, user),
            ssl=ssl,
            bind_type=bind_type,
            bind_dest=bind_dest,
            additional_rules=additional_rules,
        )
        # Only add the full vhost if SSL is valid (redirects, like HTTP ->
        # HTTPS are added regardless)
        #
        # We used to support non-HTTPS vhosts, but no longer do (rt#5347)
        if ssl.is_valid:
            vhosts.append(primary)

        # for app vhosts, define a dev vhost as well
        if bind_type == 'socket':
            dev_alias = primary.dev_alias(dev_config)
            vhosts.append(VirtualHost(
                fqdn=dev_alias,
                user=user,
                comment='{} (dev alias of {})'.format(dev_alias, domain),
                ssl=SystemSSL(getfqdn()),
                bind_type='socket',
                bind_dest=vhost['socket'],
                additional_rules=additional_rules,
            ))

            vhosts.append(VirtualHost(
                fqdn=dev_alias,
                user=user,
                comment='{} (dev alias of {}, redirect to HTTPS)'.format(dev_alias, domain),
                ssl=None,
                bind_type='redirect',
                bind_dest='https://' + dev_alias,
                additional_rules={},
            ))

        # Redirect from http://{domain} to https://{domain} for all vhosts
        redirects = {(primary.fqdn, None)}

        for alias in vhost['aliases']:
            # Redirect from http://{alias} to https://{domain}
            redirects.add((alias, None))
            ssl = SSL(alias)

            if ssl.is_valid:
                # Redirect from https://{alias} to https://{domain}
                redirects.add((alias, ssl))

        for fqdn, ssl in redirects:
            vhosts.append(VirtualHost(
                fqdn=fqdn,
                user=user,
                comment='{} (redirect to {})'.format(fqdn, primary.fqdn),
                ssl=ssl,
                bind_type='redirect',
                bind_dest=primary.canonical_url,
                additional_rules=additional_rules,
            ))

    return '\n\n'.join(
        template.render(vhost=vhost)
        for vhost in sorted(
            vhosts,
            key=lambda vhost: (vhost.user, vhost.fqdn, bool(vhost.ssl)),
        )
    )


def test_and_overwrite_config(config_path, new_config, target):
    """Diffs and tests the new config and overwrites the old config if
    the test passes.

    Returns whether the old config was overwritten.
    """
    config_path_exists = os.path.isfile(config_path)

    (_, new_path), (__, old_path) = (
        tempfile.mkstemp(
            # Prefix with '.' so temp files don't get included
            prefix='.' + os.path.basename(config_path),
            dir=os.path.dirname(config_path),
        )
        for i in range(2)
    )

    try:
        os.chmod(new_path, 0o644)
        with open(new_path, 'w') as f:
            f.write(new_config)
        report('Wrote to ' + new_path)

        if config_path_exists:
            report('Diff between current and new file:')
            ret = subprocess.call(('diff', '-u', config_path, new_path))
            report('[end diff]')

            if ret == 0:
                return False

            # Save existing config
            shutil.copyfile(config_path, old_path)
            report('Copied existing config to ' + old_path)

        # Overwrite with new config and test
        os.rename(new_path, config_path)

        report('Performing config test.')
        if target == 'web':
            ret = subprocess.call(('apachectl', 'configtest'))
        else:
            ret = subprocess.call(('nginx', '-t'))

        if ret != 0:
            report('Test failed!')
            if config_path_exists:
                report('Replacing with old config.')
                os.rename(old_path, config_path)

        return ret == 0
    finally:
        for p in old_path, new_path:
            try:
                os.remove(p)
            except FileNotFoundError:
                pass


def process_app_vhosts():
    """Perform extra tasks specific to app vhosts.

    This includes checking for membership in the ocfapphost group and fixing
    socket permissions. Returns true if nginx should reload."""
    def groups_for_user(user):
        return (g.gr_name for g in grp.getgrall() if user in g.gr_mem)

    changed = False
    for domain, vhost in get_app_vhosts().items():
        user = vhost['username']

        # Warn about ocfapphost group
        if 'ocfapphost' not in groups_for_user(user):
            report(
                "Warning: user '{}' not in group ocfapphost but has app vhost '{}'"
                .format(user, domain)
            )

        # Fix socket dir
        socket_dir = str(APP_DIR / user)
        os.makedirs(socket_dir, 0o755, exist_ok=True)
        shutil.chown(socket_dir, user, 'ocf')
        os.chmod(socket_dir, 0o755)

        # Reload nginx if a bundle has been renewed since the last reload
        last_reload_file = '/tmp/last-nginx-reload'
        for ssl in chain((SSL(domain),), map(SSL, vhost['aliases'])):
            if ssl.is_valid and (
                not os.path.exists(last_reload_file) or
                os.path.getmtime(last_reload_file) < os.path.getmtime(ssl.bundle)
            ):
                report('Touching reload file to reload bundle for ' + ssl.fqdn)
                changed = True
                Path(last_reload_file).touch()

    return changed


def main():
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawTextHelpFormatter,
    )
    parser.add_argument(
        'target', metavar='TARGET', choices=('web', 'app'),
        help="One of 'web' or 'app'. Determines which server to build for.",
    )
    parser.add_argument(
        '--dry-run', action='store_true',
        help=(
            'Build the vhost config file and print its contents without '
            'touching any files or services.'
        ),
    )
    parser.add_argument(
        '--no-reload', action='store_true',
        help=(
            "Build the vhost config file, put it in place, but don't reload "
            'the web server. '
            'Keep in mind that it may get reloaded at any time later on.'
        ),
    )
    parser.add_argument(
        '--dev', action='store_true',
        help=(
            'Use development server values, '
            'i.e. use dev-www/dev-apphost instead of www/apphost.'
        ),
    )
    args = parser.parse_args(sys.argv[1:])

    changed = False

    if args.target == 'app' and not args.dry_run:
        changed |= process_app_vhosts()

    if args.target == 'web':
        site_cfg = APACHE_SITE_CONFIG
        # Build app vhosts so that they can get proxied to apphost.o.b.e
        # Placed before regular vhosts so they take priority in domain matching
        # (sometimes hosts have entries in both vhost.conf and vhost-app.conf)
        # Filter out dev app vhosts so they don't clobber existing vhost entries
        prod_app_vhosts = {
            domain: conf
            for domain, conf in get_app_vhosts().items()
            if 'dev' not in conf['flags']
        }
        config = build_config(
            prod_app_vhosts,
            jinja_env.get_template('vhost-web.jinja'),
            dev_config=args.dev,
        )
        config += '\n\n'
        config += build_config(
            get_vhosts(),
            jinja_env.get_template('vhost-web.jinja'),
            dev_config=args.dev,
        )
    else:
        site_cfg = NGINX_SITE_CONFIG
        config = build_config(
            get_app_vhosts(),
            jinja_env.get_template('vhost-app.jinja'),
            dev_config=args.dev,
        )

    if args.dry_run:
        report(config)
        return 0

    changed |= test_and_overwrite_config(site_cfg, config, args.target)
    if changed:
        if not args.no_reload:
            report('Things changed, reloading.')
            if args.target == 'web':
                subprocess.check_call(('systemctl', 'reload', 'apache2'))
            else:
                subprocess.check_call(('systemctl', 'reload', 'nginx'))
        else:
            report('Not reloading, as you requested.')
    else:
        report('Nothing changed, not doing anything.')


if __name__ == '__main__':
    sys.exit(main())
