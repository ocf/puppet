#!/usr/bin/env python3
import ipaddress
import textwrap

import requests

GITHUB_META = 'https://api.github.com/meta'
GITHUB_PUBLIC_KEY = 'AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk='  # noqa: E501


def fetch_github_ip_range(key='git'):
    """Fetch a list of IPs from github's meta API endpoint"""
    response = requests.get(GITHUB_META)
    response.raise_for_status()
    return response.json()[key]


def subnet_to_wildcard(subnet):
    """Turn an IP network object into a wildcard form appropriate for a SSH
    known_hosts file.
    """
    prefix = subnet.prefixlen

    # The subnet given must be reduced down to a "class" so that we can make a
    # wildcard out of it. If this is not the case then it needs to be split up
    # further.
    assert prefix % 8 == 0, 'Subnet must be reduced to a class (multiple of 8) first'

    net_addr = str(subnet.network_address)
    # Short-circuit if we get a /32 since it's just an IP address and doesn't
    # need a wildcard added anywhere
    if prefix == 32:
        return net_addr

    octets = net_addr.split('.')
    octets_to_keep = prefix // 8
    return '.'.join(octets[:octets_to_keep] + ['*'])


def ip_range_to_wildcard(cidr_range):
    """Translate an IP range (in CIDR notation) to a wildcard form appropriate
    for a SSH known_hosts file.

    This only works for IPv4 addresses currently since that's all that GitHub supports.

    >>> ip_range_to_ssh_wildcard('1.2.3.4/32')
    '1.2.3.4'
    >>> ip_range_to_ssh_wildcard('192.30.252.0/22')
    '192.30.252.*,192.30.253.*,192.30.254.*,192.30.255.*'
    >>> ip_range_to_ssh_wildcard('192.30.0.0/15')
    '192.30.*,192.31.*'
    """
    network = ipaddress.ip_network(cidr_range)

    # Find the closest class (range that is a multiple of 8) that we can split
    # this into. If we have a /22 for instance, this'll result in splitting
    # into 4 /24s. If we have a /15, this'll result in splitting into 2 /16s.
    prefix = network.prefixlen
    if prefix % 8 != 0:
        prefix = prefix + 8 - (prefix % 8)

    subnets = list(network.subnets(new_prefix=prefix))
    return ','.join([subnet_to_wildcard(subnet) for subnet in subnets])


def main():
    wildcards = ','.join(ip_range_to_wildcard(ip_range) for ip_range in fetch_github_ip_range())
    # Give a warning at the top that this file is automatically generated and give some context
    print(
        textwrap.dedent('''
            # WARNING: This file is automatically generated to keep this list of IPs up to date.
            #
            # Any manual changes will be automatically overwritten. See rt#4724 for more details.
        ''')
    )
    print('github.com,{} ssh-rsa {}'.format(wildcards, GITHUB_PUBLIC_KEY))


if __name__ == '__main__':
    main()
