#!/usr/bin/env python3

import datetime
import grp
import os
import pwd
from socket import getfqdn
import sys

from cryptography import x509
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.serialization import load_pem_private_key
from cryptography.hazmat.primitives.serialization import load_pem_public_key
from cryptography.x509.oid import NameOID

PRIVATE_KEY_FILE = '/etc/kubernetes/pki/ca.key'
CA_CERT = '/etc/kubernetes/pki/ca.crt'

# This can be a short duration, since getting new certs is transparent to the
# end user.
CERT_VALID_FOR = datetime.timedelta(minutes=2)


def user_groups(username):
    """Returns all the groups a user is in"""
    gid = pwd.getpwnam(username).pw_gid
    return (
        # Secondary groups
        [g.gr_name for g in grp.getgrall() if username in g.gr_mem]
        # Primary group
        + [grp.getgrgid(gid).gr_name]
    )


def main():
    username = os.environ.get('SUDO_USER')

    if not username:
        raise RuntimeError('Unable to read SUDO_USER.')

    ca_key = load_pem_private_key(
        data=open(PRIVATE_KEY_FILE, 'rb').read(),
        password=None,
        backend=default_backend(),
    )

    ca_crt = x509.load_pem_x509_certificate(
        data=open(CA_CERT, 'rb').read(),
        backend=default_backend(),
    )

    pubkey = load_pem_public_key(
        sys.stdin.buffer.read(),
        backend=default_backend()
    )

    builder = x509.CertificateBuilder()

    # https://kubernetes.io/docs/reference/access-authn-authz/authentication/#x509-client-certs
    # Set the COMMON_NAME of the cert to be the username
    # and the ORGANIZATION_NAME (specified multiple times) for each group the
    # user is in
    builder = builder.subject_name(x509.Name([
        x509.NameAttribute(NameOID.COMMON_NAME, username),
    ] + [
        x509.NameAttribute(NameOID.ORGANIZATION_NAME, group)
        for group in user_groups(username)
    ]))

    builder = builder.issuer_name(ca_crt.subject)

    # Set the cert's expiration
    builder = builder.not_valid_before(
        datetime.datetime.utcnow() - datetime.timedelta(minutes=1)
    )
    builder = builder.not_valid_after(
        datetime.datetime.utcnow() + CERT_VALID_FOR,
    )

    builder = builder.serial_number(x509.random_serial_number())
    builder = builder.public_key(pubkey)

    builder = builder.add_extension(
        x509.KeyUsage(
            digital_signature=True,
            content_commitment=False,
            key_encipherment=True,
            data_encipherment=False,
            key_agreement=False,
            key_cert_sign=False,
            crl_sign=False,
            encipher_only=False,
            decipher_only=False,
        ),
        critical=True,
    )

    builder = builder.add_extension(
        x509.ExtendedKeyUsage([x509.oid.ExtendedKeyUsageOID.CLIENT_AUTH]),
        critical=False,
    )

    # Identify the signing key
    builder = builder.add_extension(
        x509.AuthorityKeyIdentifier.from_issuer_subject_key_identifier(
            ca_crt.extensions.get_extension_for_class(x509.SubjectKeyIdentifier)
        ),
        critical=False,
    )

    certificate = builder.sign(
        private_key=ca_key,
        algorithm=hashes.SHA256(),
        backend=default_backend(),
    )

    sys.stdout.buffer.write(certificate.public_bytes(serialization.Encoding.PEM))


if __name__ == '__main__':
    main()
