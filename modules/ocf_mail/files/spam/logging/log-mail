#!/usr/bin/env python3
# Appends JSON dictionary of NSA-style metadata about a message read from stdin
# to /var/log/ocfmail.log for the purposes of monitoring spam. Should be run as
# the postfix user.
#
# Note that `date` returned is the current date (and not one parsed from
# message headers), since we don't really trust headers more than necessary.
import email.utils
import io
import json
import pwd
import re
import sys
from datetime import datetime
from email.header import decode_header
from email.header import make_header

from ocflib.vhost.mail import get_mail_vhosts


LOG_FILE = '/var/log/ocfmail.log'


def mime_decode(string):
    """Decode any UTF-8 encoded strings as specified by RFC 2047.

    These are mostly found in From and Subject headers of emails and look
    something like "=?UTF-8?Q?" + encoded_data + "?=" where the encoded data
    just has some characters encoded (for example =E2=84=A2 turn into something
    like â„¢ when decoded). It can also take the form of "=?UTF-8?B?" +
    encoded_data + "?=" where all the data is base64 encoded.
    """
    return str(make_header(decode_header(string)))


def parse_received_for_uid(header):
    """Attempt to parse relay host and sender uid from Received header.

    This header can be faked by the message sender if they don't send via local
    MTA to blame other users, so we rely on this being prevented via firewall
    rules.
    """
    match = re.match(
        'by ([a-zA-Z\\-\\.]*) \\(Postfix, from userid ([0-9]*)\\)',
        header,
    )
    if match:
        return {'relay': match.group(1), 'uid': match.group(2)}


def parse_received_for_auth(header):
    """Attempt to parse sender UID for authenticated SMTP mails.

    These come from student groups with mail virtual hosting sending via SMTP.
    We look up which group owns that domain and mark this mail as belonging to
    them in our logs.
    """
    match = re.search(
        r'^\t\(Authenticated sender: ([^@]+@([^\)]+))\)$',
        header,
        re.MULTILINE,
    )
    if match:
        domain = match.group(2).lower()
        user, = [
            vhost.user
            for vhost in get_mail_vhosts()
            if vhost.domain == domain
        ]
        # TODO: uids should be ints...
        return {
            'uid': str(pwd.getpwnam(user).pw_uid),
            'smtp_user': match.group(1).lower(),
        }


def parse_received_for_recipient(header):
    """Attempt to parse the receipient address from the Received header.

    The To header is required, but can sometimes be something like "To:
    undisclosed-recipients:;", which is not helpful at all and otherwise
    produces an empty output in the log ([null, null]). We'd prefer to have an
    actual address shown, so we search through the Received headers for an
    address to log.
    """
    match = re.search(
        r'^\tfor <(.+?)>;(.*)$',
        header,
        re.MULTILINE,
    )
    if match:
        # The recipient's name will be empty since only the email is parsed out
        # of the Received header
        return ('', match.group(1))


def clean_addr(realname, addr):
    """Cleans up email address, attempting to normalize as much as possible.

    We keep the realname in case it says something useful (e.g. 'Cron Daemon').

    >>> clean_addr('Chris Kuehl', '<cKuEhL@OCF.Berkeley.EDU>')
    ('Chris Kuehl', 'ckuehl@ocf.berkeley.edu')
    """
    return mime_decode(realname.strip()) or None, addr.strip().lower() or None


if __name__ == '__main__':
    safe_stdin = io.TextIOWrapper(
        sys.stdin.buffer,
        encoding='utf-8',
        errors='ignore',
    )
    message = email.message_from_file(safe_stdin)

    parsed = {}
    received = message.get_all('Received')
    to = clean_addr(*email.utils.parseaddr(message['To']))
    if received:
        parsed = (
            # received header with uid comes from the first relay
            parse_received_for_uid(received[-1]) or
            # received header with smtp username comes from the last (*this*
            # smtp server)
            parse_received_for_auth(received[0]) or
            {}
        )

        if to == (None, None):
            # If the To header does not contain an address, then attempt to
            # find the recipient address in the received headers
            to = clean_addr(*parse_received_for_recipient(received[0]))

    cc_addrs = message.get_all('Cc') or []
    info = {
        'relay': parsed.get('relay'),
        'uid': parsed.get('uid'),
        'smtp_user': parsed.get('smtp_user'),
        'from': clean_addr(*email.utils.parseaddr(message['From'])),
        'to': to,
        'cc': [clean_addr(*addr) for addr in email.utils.getaddresses(cc_addrs)],
        'subject': mime_decode(message['Subject']),
        'date': datetime.now().isoformat(),
    }

    with open(LOG_FILE, 'a', encoding='utf-8') as f:
        print(json.dumps(info, sort_keys=True, ensure_ascii=False), file=f)
