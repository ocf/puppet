#!/bin/bash
# Downloads Debian netboot images and prepares for PXE booting and
# automated installations (via preseed file)
#
# Optionally adds Debian nonfree firmware to initrd
#
# Also downloads memtest, Darik's Boot and Nuke, and finnix and adds them to
# the PXE boot menu. We do this by hijacking the boot menu of the first
# distribution and architecture in the list and adding our own menu items.

set -euo pipefail

# Whichever architecture and distribution is first in the arrays is the default,
# and is (ab)used for the PXE boot menu.
archs=(amd64)
dists=(buster stretch bullseye)
menu_arch="${archs[0]}"
menu_dist="${dists[0]}"
menu_path="debian-installer/$menu_arch"
txt_cfg="$menu_path/boot-screens/txt.cfg"

# Unfortunately, there is no good way to get a finnix tarball via script.
# The best way is:
#   - boot finnix from ISO in a virtual machine
#   - run `finnix-netboot-server`.
#   - make sure to select "fat initrd" instead of the NFS option; this
#     requires more memory but lets us avoid an NFS server during netboot
#   - cd /srv/tfp && tar cfz finnix.tar.gz finnix
#   - scp finnix.tar.gz supernova:~staff/public_html/
# Note that the "fat" initrd requires ~0.75 GB of memory, so if you're
# testing with a VM, be sure to give it sufficient RAM.
finnix="https://www.ocf.berkeley.edu/~staff/finnix.tar.gz"
dban="https://sourceforge.net/projects/dban/files/latest/download"
memtest="http://www.memtest.org/download/5.01/memtest86+-5.01.bin.gz"
tftpdir='/opt/tftp'
preseeddir='/opt/preseed'

# Remove old pxe files
rm -rf $tftpdir
mkdir $tftpdir
chmod 755 $tftpdir

for dist in "${dists[@]}"; do
    for arch in "${archs[@]}"; do
        if [ "$dist" != "bullseye" ]; then
            netboot="http://mirrors/debian/dists/$dist/main/installer-$arch/current/images/netboot/netboot.tar.gz"
            fw="http://cdimage.debian.org/cdimage/unofficial/non-free/firmware/$dist/current/firmware.tar.gz"
        else
            # TODO: Currently the daily image is broken, so use one that works with the firmware
            # Once bullseye becomes stable this should be removed and added to the section above,
            # and replaced with the new testing release.
            netboot="https://d-i.debian.org/daily-images/amd64/daily/netboot/netboot.tar.gz"
            fw=""
        fi

        fwdir=$(mktemp -d)
        label="${dist}-${arch}"

        if [ "$dist" == "$menu_dist" ] && [ "$arch" == "$menu_arch" ]; then
          da_dir='.'
        else
          da_dir=$label
        fi

        # Download and extract netboot image
        echo "Downloading netboot.tar.gz for $dist ($arch)..."
        cd $tftpdir
        wget -q -O netboot.tar.gz "$netboot"
        mkdir -p $da_dir
        tar -zxf netboot.tar.gz -C $da_dir

        # Add non-free firmware to initrd if set
        if [ -n "$fw" ]; then
            echo "Downloading non-free firmware..."
            cd $fwdir
            mkdir -p firmware
            wget -q "$fw"
            cd $fwdir/firmware
            tar -zxf ../firmware.tar.gz
            cd $fwdir

            echo "Adding non-free firmware to initrd..."
            pax -x sv4cpio -s'%firmware%/firmware%' -w firmware | gzip -c > firmware.cpio.gz

            cd $tftpdir/$da_dir/debian-installer/$arch
            [ -f initrd.gz.orig ] || cp -p initrd.gz initrd.gz.orig
            cat initrd.gz.orig $fwdir/firmware.cpio.gz > initrd.gz

            rm -rf $fwdir
        fi

        echo "Adding OCF preseed file into installer menu..."
        cd $tftpdir
        cp -r $preseeddir $tftpdir

        # Add OCF install options, set as default if menu dist and arch
        # The first item overwrites the existing install menu option, as we do
        # not want it (would like to use our own instead)
        if [ "$dist" == "$menu_dist" ] && [ "$arch" == "$menu_arch" ]; then
            echo "label ocf-$label
                menu label OCF Automated Install ($label)
                menu default
                kernel debian-installer/$arch/linux
                append auto=true priority=critical locale=en_US keymap=us vga=788 initrd=debian-installer/$arch/initrd.gz url=tftp://dhcp/preseed/$dist -- quiet" > $txt_cfg
        else
            echo "label ocf-$label
                menu label OCF Automated Install ($label)
                kernel $da_dir/debian-installer/$arch/linux
                append auto=true priority=critical locale=en_US keymap=us vga=788 initrd=$da_dir/debian-installer/$arch/initrd.gz url=tftp://dhcp/preseed/$dist -- quiet" >> $txt_cfg
        fi
    done
done

# Auto-select OCF option after 30 seconds
sed -i 's/timeout 0/timeout 300/' pxelinux.cfg/default


# Download DBAN, add to menu
echo "Downloading DBAN..."
cd $tftpdir
wget -q -O dban.iso "$dban"
7z x -odban dban.iso > /dev/null # terrible CLI

find dban -type d -exec chmod 755 {} \;

echo "label dban
    menu label Darik's Boot and Nuke
    kernel dban/DBAN.BZI
    append load_ramdisk=1 root=/dev/ram0 nuke=\"dwipe --autonuke --method zero\"" \
>> $txt_cfg


# Download Memtest86+, add to menu
echo "Downloading Memtest86+..."
cd $tftpdir
mkdir -p memtest
wget -q -O memtest/memtest.bin.gz "$memtest"
echo "Extracting Memtest86+..."
gunzip -c memtest/memtest.bin.gz > memtest/memtest

echo "label memtest
    menu label Memtest86+
    kernel memtest/memtest" \
>> $txt_cfg


# Extract and add Finnix to menu
echo "Downloading finnix..."
wget -q -O finnix.tar.gz "$finnix"
echo "Extracting finnix..."
tar xf finnix.tar.gz
echo "label finnix
    menu label Finnix (requires 768 MB RAM)
    kernel finnix/boot/x86/linux64
    append initrd=finnix/boot/x86/initrd_net.xz vga=791 nomodeset" \
>> $txt_cfg


# Clean up
echo "Cleaning up..."
rm $tftpdir/netboot.tar.gz
rm dban.iso
rm memtest/memtest.bin.gz


# Restart tftpd to provide the new PXE boot files
echo "Restarting TFTP service..."
service tftpd-hpa restart

echo "PXE image is ready."
