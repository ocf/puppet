#!/usr/bin/env python3
import datetime
import sched
import time

from gi.repository import Notify
from ocflib.account.utils import is_staff
from ocflib.lab.hours2 import read_hours_listing
from ocflib.misc.whoami import current_user


def notify_user(seconds_left, staff):
    title = 'Lab closure'
    if seconds_left != 0:
        msg = 'Lab closing in {0:g} minutes'.format(seconds_left / 60)
        icon = 'appointment-soon'
    else:
        if staff:
            msg = 'The lab is now closed.'
        else:
            msg = 'The lab is now closed. Please log out and leave right away.'
        icon = 'appointment-missed'

    notif = Notify.Notification.new(title, msg, icon)
    notif.show()


def main():
    staff = is_staff(current_user())
    if staff:
        # 0 minutes, 15 minutes
        warning_durations = [0, 900]
    else:
        # 0 minutes, 2 minute, 5 minutes, 10 minutes, 15 minutes
        warning_durations = [0, 120, 300, 600, 900]

    today = datetime.datetime.today()
    closing_times = [
        datetime.datetime.combine(today.date(), hour.close).timestamp()
        for hour in read_hours_listing().hours_on_date()
    ]

    s = sched.scheduler(time.time)

    for t in closing_times:
        for d in warning_durations:
            if t - d > today.timestamp():
                s.enterabs(t - d, 0, notify_user, argument=(d, staff))

    Notify.init('OCF')
    s.run()


if __name__ == '__main__':
    main()
