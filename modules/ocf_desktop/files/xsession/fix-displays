#!/usr/bin/env python3
# Tile multiple monitors side-by-side
import socket
import subprocess
import time


def get_monitors():
    lines = subprocess.check_output(['xrandr']).decode('utf8').splitlines()
    return [line.split()[0] for line in lines if ' connected' in line]


def is_daisy_chaining(monitors):
    # DisplayPort "daisy chaining" utilizes Multi-Stream-Transport feature
    # that enables several video streams to be carried over single DP port
    #
    # Check if using daisy chain, if a monitor is daisy chained, the numbering
    # of monitors follows this format (empirically observed, may break if nvidia
    # changes something in the future).
    #
    # ['DP-0.8', 'DP-0.1.8', 'DP-0.1.1.8']
    # The leading digit stays the same for the daisy chained devices
    #
    # In other cases, the leading digits differ.
    prefix = monitors[0][:4] if len(monitors) > 0 else ''

    return all(monitor.startswith(prefix) for monitor in monitors)


if __name__ == '__main__':
    time.sleep(1)
    monitors = get_monitors()
    hostname = socket.gethostname()

    # tile monitors side-by-side, based on physical ports
    #
    # For example, with the below grahpics card, excluing DVI port
    # Left most monitor should go to the left most port (DP 1) and so on
    #
    # +------------------------------------------------+
    # |   +----------------+    | +------------------+ |
    # |   |    D V I       |    | |  |  Exhaust   |  | |
    # |   +----------------+    | +------------------+ |
    # +------------------------------------------------+
    # |   +-------+ +--------+  +-------+   +-------+  |
    # |   +  DP 1 | |  HDMI  |  +  DP 2 |   +  DP 3 |  |
    # |    \------+ \-------/    \------+    \------+  |
    # +------------------------------------------------+

    daisy_chained = is_daisy_chaining(monitors)

    if daisy_chained:
        sorted_monitors = list(sorted(monitors, reverse=True))
    else:
        sorted_monitors = list(sorted(monitors))

    # special case for eruption: right monitor is rotated left 90 degrees
    if len(monitors) == 3 and hostname == 'eruption':
        # horizontal monitors are moved down a bit; move vertical up to compensate
        resolution = (1440, 2560)
        vert_offset = (resolution[1] - resolution[0]) / 2

        subprocess.check_call(['xrandr', '--output', sorted_monitors[0],
                               '--pos', '{}x{}'.format(0, 0)])

        subprocess.check_call(['xrandr', '--output', sorted_monitors[1],
                               '--pos', '{}x{}'.format(resolution[1], 0)])

        subprocess.check_call(['xrandr', '--output', sorted_monitors[2],
                               '--rotate', 'left', '--pos', '{}x{}'.format(resolution[1] * 2, -vert_offset)])
    else:
        prev = None
        for monitor in sorted_monitors:
            if prev:
                subprocess.check_call(['xrandr', '--output', monitor, '--right-of', prev])
            prev = monitor

    if daisy_chained:
        subprocess.check_call(['fix-daisy'])
