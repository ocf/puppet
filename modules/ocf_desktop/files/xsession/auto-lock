#!/usr/bin/env python3
import os
import sys
import time

from gi.repository import Gdk
from gi.repository import GLib
from gi.repository import Notify
from ocflib.account.utils import is_in_group
from ocflib.misc.whoami import current_user

# Time in seconds we wait for the user to move mouse/press keyboard
WAIT_TIME = 180

# Global variables. Just listing them out here.
pointer = None
keyboard = None
time_left = WAIT_TIME
notification = None
user = current_user()
is_staffer = is_in_group(user, 'ocfstaff') or is_in_group(user, 'opstaff')


def set_event_handler():
    """Grabs pointer and keyboard and registers an event handler for the root
    window."""
    EVENT_MASK = Gdk.EventMask.POINTER_MOTION_MASK \
        | Gdk.EventMask.BUTTON_PRESS_MASK \
        | Gdk.EventMask.BUTTON_RELEASE_MASK \
        | Gdk.EventMask.KEY_PRESS_MASK \
        | Gdk.EventMask.KEY_RELEASE_MASK
    global pointer
    global keyboard

    root_win = Gdk.get_default_root_window()
    pointer = root_win.get_display().get_device_manager().get_client_pointer()
    keyboard = pointer.get_associated_device()

    # Grab pointer and keyboard so we can actually get events from them
    status = pointer.grab(root_win, Gdk.GrabOwnership.NONE, False, EVENT_MASK,
                          None, Gdk.CURRENT_TIME)
    if status != Gdk.GrabStatus.SUCCESS:
        print(sys.argv[0] + ': Unable to grab pointer:', status.value_name,
              file=sys.stderr)
        sys.exit(2)

    status = keyboard.grab(root_win, Gdk.GrabOwnership.NONE, False, EVENT_MASK,
                           None, Gdk.CURRENT_TIME)
    if status != Gdk.GrabStatus.SUCCESS:
        print(sys.argv[0] + ': Unable to grab keyboard:', status.value_name,
              file=sys.stderr)
        sys.exit(2)

    root_win.set_events(EVENT_MASK)
    Gdk.Event.handler_set(event_handler)


def event_handler(ev):
    """Event handler for the root window."""
    if ev.type in (Gdk.EventType.MOTION_NOTIFY, Gdk.EventType.BUTTON_PRESS,
                   Gdk.EventType.BUTTON_RELEASE, Gdk.EventType.KEY_PRESS,
                   Gdk.EventType.KEY_RELEASE):
        main_loop.quit()


def notifier_callback(_):
    """Updates the display of time remaining."""
    global time_left

    time_left -= 1
    if time_left > 0:
        show_notification()
        return True
    else:
        main_loop.quit()


def show_notification():
    msg_fmt = 'Locking screen in {}:{:02}.' if is_staffer \
        else 'Logging you out in {}:{:02}.'
    notification.update('You have been inactive',
                        msg_fmt.format(*divmod(time_left, 60)),
                        'dialog-warning')
    notification.show()


def cleanup():
    """Ungrabs pointer and keyboard"""
    pointer.ungrab(Gdk.CURRENT_TIME)
    keyboard.ungrab(Gdk.CURRENT_TIME)


def display_cancelled_notification():
    """Displays a message that locking/logout has been canceled."""
    notification.update('You have been active again',
                        'Locking cancelled' if is_staffer
                        else 'Logout cancelled',
                        'dialog-information')
    notification.set_timeout(3000)
    notification.show()


def timebomb_explode():
    """Runs the lock command or logout command."""
    if is_staffer:
        cmd = ['loginctl', 'lock-session']
    else:
        cmd = ['loginctl', 'terminate-session', os.environ.get('XDG_SESSION_ID')]

    try:
        os.execvp(cmd[0], cmd)
    except OSError as e:
        print('{}: Fatal: could not execute command list {}: {}'
              .format(sys.argv[0], cmd, e.strerror), file=sys.stderr)
        sys.exit(127)


def main():
    global main_loop
    global notification

    print(sys.argv[0] + ': current time is', time.strftime('%H:%M:%S'),
          file=sys.stderr)
    sys.stderr.flush()

    Notify.init('Auto Locker/Logout')
    notification = Notify.Notification()

    show_notification()
    set_event_handler()

    main_loop = GLib.MainLoop()
    GLib.timeout_add(1000, notifier_callback, None)
    main_loop.run()

    cleanup()
    if time_left > 0:
        display_cancelled_notification()
        sys.exit(1)  # Because we didn't lock/logout
    else:
        timebomb_explode()


if __name__ == '__main__':
    main()
