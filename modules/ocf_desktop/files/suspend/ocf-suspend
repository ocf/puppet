#!/usr/bin/env python3
"""Suspend this desktop if not in use and lab is closed.

Contains a few checks (is anyone logged in, is Puppet running, etc.) before
shutting off.

If a kernel update is needed, the desktop will restart instead of suspending.
"""
import argparse
import os
import subprocess
import sys
from datetime import datetime
from datetime import time
from subprocess import DEVNULL
from syslog import syslog

from ocflib.lab.hours import read_hours_listing


def file_is_open(path):
    """Return whether a file is open by any process on the system."""
    return subprocess.call(('lsof', '--', path), stdout=DEVNULL, stderr=DEVNULL) == 0


def is_atdp_hours():
    """Return whether the given time is during atdp hours.
    If not provided, when defaults to now.
    """
    days = [0, 2, 4]  # Monday, Wednesday, Friday
    open_time = time(8, 00)  # 8:00 AM
    close_time = time(16, 30)  # 4:30 PM
    when = datetime.now()
    return when.weekday() in days and open_time <= when.time() <= close_time


def main(argv=None):
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--force', '-f', action='store_true', help='force suspend, even if the lab is open')
    parser.add_argument('--quiet', '-q', action='store_true', help='stay quiet except for unexpected errors')
    args = parser.parse_args(argv)

    def report(line):
        if not args.quiet:
            print('[ocf-suspend] {}'.format(line), file=sys.stderr)

        # Log to the syslog whether the script is in quiet mode or not
        #
        # This is useful for debugging or figuring out why a desktop didn't
        # sleep when it should have.
        syslog(line)

    # Don't sleep if...
    # ...lab is open
    if (read_hours_listing().is_open() or is_atdp_hours()) and not args.force:
        report('not suspending as lab is open')
        return 1

    # ...we're installing packages
    if file_is_open('/var/lib/dpkg/lock'):
        report('not suspending as packages are installing')
        return 2

    # ...puppet is running
    if file_is_open('/var/lib/puppet/state/agent_catalog_run.lock'):
        report('not suspending as puppet is running')
        return 2

    # ...a user is logged in
    if subprocess.check_output(('w', '--no-header')):
        report('not suspending as user(s) are logged in')
        return 3

    # ...we're a virtual machine
    if subprocess.check_output(('imvirt')) != b'Physical\n':
        report('not suspending as this is not a physical machine')
        return 4

    report('checks passed, okay to suspend')

    # Try to remount /home to free up space (if it's even mounted).
    with open('/proc/mounts') as f:
        if 'tmpfs /home tmpfs' in f.read():
            if subprocess.call(('umount', '/home'), stdout=DEVNULL, stderr=DEVNULL) != 0:
                report('not suspending as could not unmount /home')
                return 5
        else:
            report('/home not mounted, so not unmounted')

    subprocess.check_call(('mount', '/home'))

    reboot_needed = '/var/run/apt-dater-host_reboot'
    if os.path.isfile(reboot_needed):
        # Reboot because there's a kernel update.
        os.remove(reboot_needed)
        report('rebooting because of newer installed kernel')
        subprocess.check_call(('/sbin/shutdown', '-r', 'now'), stdout=DEVNULL, stderr=DEVNULL)
    else:
        # Enable wake-on-LAN and go to sleep.
        report('going to sleep')
        subprocess.check_call(('/sbin/ethtool', '-s', 'eth0', 'wol', 'g'), stdout=DEVNULL, stderr=DEVNULL)
        if subprocess.call(('/usr/sbin/pm-suspend'), stdout=DEVNULL, stderr=DEVNULL) != 0:
            report('failed to suspend')


if __name__ == '__main__':
    sys.exit(main())
