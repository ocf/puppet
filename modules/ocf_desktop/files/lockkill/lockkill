#!/usr/bin/env python3
import grp
import logging
import subprocess
import time
from typing import Dict
from typing import Iterable
from typing import List
from typing import Set

immune_groups: List[str] = ['ocfstaff', 'opstaff']
immune_users: List[str] = []

interval = 60  # seconds
kill_after = 4  # periods
immune_kill_after = 4 * 60  # periods (4 hours)


loginctl = '/usr/bin/loginctl'

# Need authorization for polkit actions:
#   org.freedesktop.login1.manage
#   org.freedesktop.login1.lock-sessions


logger = logging.getLogger(__name__)


def parse_output(output: bytes) -> List[Dict[str, str]]:
    if len(output) == 0:
        return []

    def parse_chunk(chunk: str):
        d: Dict[str, str] = dict()
        for line in chunk.splitlines():
            equal_idx = line.find('=')
            d[line[:equal_idx]] = line[equal_idx + 1:]
        return d

    return [parse_chunk(chunk) for chunk in output.decode().split('\n\n')]


def parse_bool(s: str) -> bool:
    if s == 'yes':
        return True
    if s == 'no':
        return False
    raise ValueError(f'invalid bool value "{s}"')


def get_users_in_groups(groups: Iterable[str]) -> Set[str]:
    s: Set[str] = set()
    for group in groups:
        s.update(grp.getgrnam(group).gr_mem)
    return s


class Killer:
    seat: str
    tallys: Dict[str, int]

    def __init__(self, seat='seat0'):
        self.seat = seat
        self.tallys = dict()

    def tick(self):
        all_immune_users = get_users_in_groups(immune_groups) | set(immune_users)

        sessions = parse_output(
            subprocess.check_output(
                [loginctl, 'show-seat', '-p', 'Sessions', self.seat]
            )
        )[0]['Sessions'].split()

        session_infos = parse_output(
            subprocess.check_output(
                [
                    loginctl,
                    'show-session',
                    '-p',
                    'Id',
                    '-p',
                    'Name',
                    '-p',
                    'Class',
                    '-p',
                    'Active',
                    '-p',
                    'LockedHint',
                    *sessions,
                ]
            )
        )

        # keep track of the sessions we actually got data from
        # in case a session terminated between listing
        # sesssions and querying them
        found_sessions: Set[str] = set()

        for info in session_infos:
            try:
                sid = info['Id']
                uname = info['Name']
            except KeyError:
                logger.exception(f'error parsing session: {info}')
                continue
            try:
                s_active = parse_bool(info['Active'])
                s_class = info['Class']
                locked_hint = parse_bool(info['LockedHint'])
            except ValueError:
                logger.exception(f'error parsing session {sid} ({uname})')
                continue

            found_sessions.add(sid)

            if s_class != 'user':
                continue

            kill_eligible = not s_active or locked_hint
            if kill_eligible:
                tallys = self.tallys[sid] = self.tallys.get(sid, 0) + 1
                threshold = immune_kill_after if uname in all_immune_users else kill_after
                if tallys == threshold:
                    subprocess.check_call([loginctl, 'terminate-session', sid])
                elif tallys > threshold:
                    subprocess.check_call([loginctl, 'kill-session', sid])
            else:
                try:
                    del self.tallys[sid]
                except KeyError:
                    pass

            if not s_active and not locked_hint:
                subprocess.check_call([loginctl, 'lock-session', sid])

        for old_sid in set(self.tallys.keys()) - found_sessions:
            del self.tallys[old_sid]


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)

    killer = Killer()
    while True:
        killer.tick()
        if killer.tallys:
            logger.info(f'tallys: {killer.tallys}')
        time.sleep(interval)
