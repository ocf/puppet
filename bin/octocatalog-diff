#!/usr/bin/python3
# Note that this does not use the /usr/bin/env python3 shebang because it wants
# to use the system-installed requests and ocflib which are not in the puppet
# python virtualenv
import os
import subprocess
import sys
from multiprocessing import Pool
from pathlib import Path

import requests


CACHE_DIR_NAME = '.octocatalog-diff-cache'
PUPPETDB_NODES_URL = 'https://puppetdb:8081/pdb/query/v4/nodes'
# TODO: Change this to not piggyback off the ocfweb certs
PUPPET_CERT_DIR = '/etc/ocfweb/puppet-certs'

GITHUB_COLLAPSE_CODE = '''
<details>
  <summary>{}</summary>

```{}
{}
```
</details>'''

GITHUB_COLLAPSE_CONTAINER = '''
<details>
  <summary>{}</summary>

{}
</details>'''


def info(output):
    print(output, file=sys.stderr)


def setup_cache():
    workspace = os.getenv('WORKSPACE') or os.path.join(str(Path.home()), '.cache')
    cache_path = os.path.join(workspace, CACHE_DIR_NAME)

    subprocess.check_call((
        'octocatalog-diff',
        '--debug',
        '--bootstrap-then-exit',
        '--bootstrapped-from-dir={}'.format(cache_path),
    ))


def get_hosts_from_puppetdb():
    """Queries puppetdb for a list of hosts to test puppet runs for. Note that
    the puppet runs do not happen on these hosts, but the catalogs are compiled
    locally like they would be for these hosts (with the same facts, modules,
    etc.)
    """
    r = requests.get(
        PUPPETDB_NODES_URL,
        cert=(
            os.path.join(PUPPET_CERT_DIR, 'puppet-cert.pem'),
            os.path.join(PUPPET_CERT_DIR, 'puppet-private.pem'),
        ),
        verify=os.path.join(PUPPET_CERT_DIR, 'puppet-ca.pem'),
    )
    r.raise_for_status()
    return sorted([host['certname'] for host in r.json()])


def diff(host):
    """Run octocatalog-diff for a particular hostname, and return whether the
    run succeeded or failed and any output"""
    process = subprocess.run(
        ' '.join(
            (
                'octocatalog-diff',
                # Add a --debug flag to get much more verbose output
                '-n', host,
                '--enc-override',
                'environment=production,parameters::dummy_secrets=true',
                # Unfortunately color codes are not handled well by github, so
                # we turn those off here
                '--no-color',
                '--display-detail-add',
                # Ignore changes to puppetserver settings, since these are
                # dependent on the path that octocatalog-diff sets and thus
                # always differ
                "--ignore 'Ini_setting[puppet.conf/master/storeconfigs]'",
                "--ignore 'Ini_setting[puppet.conf/master/storeconfigs_backend]'",
                "--ignore 'Ini_setting[puppetdbserver_urls]'",
                "--ignore 'Ini_setting[soft_write_failure]'",
                "--ignore 'File[/tmp/*/routes.yaml]'",
                # Ignore changes to SSH keys, since these change when any
                # machines are reprovisioned, etc. and change frequently
                "--ignore 'Sshkey[*]'",
            ),
        ),
        stderr=subprocess.PIPE,
        stdout=subprocess.PIPE,
        # We need shell=True here for the diffs to calculate correctly on the
        # puppetmaster, otherwise the ignore settings above do not take effect.
        # This should be safe enough as we aren't accepting user-defined input
        shell=True,
    )

    stdout = process.stdout.decode('utf-8').rstrip()
    stderr = process.stderr.decode('utf-8').rstrip()
    info('stdout for {}'.format(host))
    info(stdout)
    info('stderr for {}'.format(host))
    info(stderr)

    if process.returncode == 0:
        # This is a clean run, puppet did not error and there was no diff
        return (host, 0, None)
    elif process.returncode == 2:
        # This means the puppet run has found some diff from master, so we
        # return this and report it back in the review but do not fail the run
        return (host, 0, stdout)
    else:
        # This means the puppet run has failed in some way (a return code of 1
        # is pretty usual for that), so we return an error code and the output
        # to post in the review
        return (host, 1, GITHUB_COLLAPSE_CODE.format('error for {}'.format(host), 'text', stderr))


def process_output(empty_diffs, diffs, errors, return_code, output):
    host, status, cmd_output = output
    return_code = max(return_code, status)

    if status and cmd_output:
        errors.append(cmd_output)
    elif cmd_output:
        output_without_host = cmd_output.split('\n', 1)[1]
        diffs[output_without_host] = diffs.get(output_without_host, []) + [host]
    else:
        empty_diffs.append(host)

    return empty_diffs, diffs, errors, return_code


def collapsible_report(title, contents):
    print(
        GITHUB_COLLAPSE_CONTAINER.format(
            title,
            contents,
        ),
    )


def all_diffs():
    """Run octocatalog-diff across all nodes that can be fetched from puppetdb

    TODO: Make this faster by just selecting a single node from each class we
    care about (not selecting all desktops/hozers for example)
    """
    info('Setting up cache...')
    setup_cache()

    info('Getting hosts from puppetdb...')
    hosts = get_hosts_from_puppetdb()

    # Get number of cores to parallelize across and create a worker pool of that size
    pool = Pool(os.cpu_count())

    info('Running octocatalog-diff across all hosts...')
    run_output = pool.imap(diff, hosts)

    # Print out information to be posted in a comment on the review
    #
    # Also find any status codes that are non-zero (errors encountered in
    # puppet runs), and use that as the return code to report
    empty_diffs = []
    diffs = {}
    errors = []
    return_code = 0
    for output in run_output:
        empty_diffs, diffs, errors, return_code = process_output(
            empty_diffs, diffs, errors, return_code, output,
        )

    # Gather and print the number of hosts in each category as a summary
    num_changed = sum([len(hosts) for hosts in diffs.values()])
    print('#### Errored hosts ({})'.format(len(errors)))
    print('#### Changed hosts ({})'.format(num_changed))
    print('#### Unaffected hosts ({})'.format(len(empty_diffs)))
    print('<hr>')

    # Report any hosts that had errors (catalog compilation failed)
    if errors:
        collapsible_report('Errored hosts', '\n'.join(errors))

    # For any diffs, print them grouped by diff so it's not too verbose and
    # it's easier to see which hosts are affected
    if diffs:
        text = []
        for diff_text, hosts in diffs.items():
            text.append(
                GITHUB_COLLAPSE_CODE.format(
                    'diff for {}'.format(', '.join(sorted(hosts))),
                    'diff',
                    diff_text,
                ),
            )

        collapsible_report('Changed hosts', '\n'.join(text))

    # Unaffected hosts just have their hostnames printed, but there's nothing
    # else to really show about them since nothing of note happened
    if empty_diffs:
        collapsible_report(
            'Unaffected hosts',
            '```\n{}\n```'.format('\n'.join(empty_diffs)),
        )

    return return_code


if __name__ == '__main__':
    sys.exit(all_diffs())
